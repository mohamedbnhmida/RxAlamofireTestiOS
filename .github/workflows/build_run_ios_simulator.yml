name:  Build & Run on iOS Simulator

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  run:
    runs-on: self-hosted
    name: Build & Run on iOS Simulator

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Decode GoogleService-Info.plist (if applicable)
      - name: Decode GoogleService-Info.plist
        run: |
          base64 --decode -i encoded_plist.txt -o GoogleService-Info.plist
          
      # Step 3: Verify GoogleService-Info.plist
      - name: Verify GoogleService-Info.plist
        run: ls -a

      # Step 4: Build the iOS App for Simulator
      - name: Build iOS App
        run: |
          xcodebuild -workspace RxAlamofire.xcworkspace \
                     -scheme RxAlamofire \
                     -sdk iphonesimulator \
                     -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.1' \
                     clean build \
                     CODE_SIGN_STYLE=Automatic
           # Step 5: Ensure Simulator is Booted
      - name: Ensure Simulator is Booted
        run: |
          # Open Simulator if not running
          SIMULATOR_RUNNING=$(pgrep -x "Simulator" > /dev/null && echo "yes" || echo "no")
          if [ "$SIMULATOR_RUNNING" == "no" ]; then
            echo "Opening Simulator..."
            open -a Simulator
          fi

          # Wait for a simulator to be booted with a timeout of 2 minutes (120 seconds)
          echo "Waiting for a simulator to boot..."
          TIMEOUT=120
          ELAPSED=0
          while true; do
            BOOTED_SIMULATORS=$(xcrun simctl list devices | grep -E "Booted" | wc -l)
            if [ "$BOOTED_SIMULATORS" -gt 0 ]; then
              echo "Simulator is booted."
              break
            elif [ "$ELAPSED" -ge "$TIMEOUT" ]; then
              echo "Timeout reached: No simulator booted within $TIMEOUT seconds."
              exit 1
            else
              echo "No booted simulator found. Retrying in 5 seconds..."
              sleep 5
              ELAPSED=$((ELAPSED + 5))
            fi
          done
      # Step 6: Install the .app file to the Simulator
      - name: Install App to Simulator
        run: |
          # Find the most recent DerivedData folder
          DERIVED_DATA_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "RxAlamofire*" -type d | head -n 1)
          APP_PATH="${DERIVED_DATA_PATH}/Build/Products/Debug-iphonesimulator/RxAlamofire.app"
          # Install the app to the simulator
          xcrun simctl install booted $APP_PATH
      # Step 7: Launch the App on the Simulator
      - name: Launch App on Simulator
        run: |
          # Launch the app on the simulator (replace with your app's bundle identifier)
          xcrun simctl launch booted benhmida.myRXExample
